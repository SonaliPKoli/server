{"ast":null,"code":"// import { useState } from \"react\";\n// import {\n//   Box,\n//   Button,\n//   TextField,\n//   useMediaQuery,\n//   Typography,\n//   useTheme,\n// } from \"@mui/material\";\n// import EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\n// import { Formik } from \"formik\";\n// import * as yup from \"yup\";\n// import { useNavigate } from \"react-router-dom\";\n// import { useDispatch } from \"react-redux\";\n// import { setLogin } from \"../../state\";\n// import Dropzone from \"react-dropzone\";\n// import FlexBetween from \"../../components/FlexBetween\";\n// const registerSchema = yup.object().shape({\n//   firstName: yup.string().required(\"required\"),\n//   latstName: yup.string().required(\"required\"),\n//   email: yup.string().email(\"invalid email\").required(\"required\"),\n//   password: yup.string().required(\"required\"),\n//   location: yup.string().required(\"required\"),\n//   occupation: yup.string().required(\"required\"),\n//   picture: yup.string().required(\"required\"),\n// });\n// const loginSchema = yup.object().shape({\n//   email: yup.string().email(\"invalid email\").required(\"required\"),\n//   password: yup.string().required(\"required\"),\n// });\n// const initialValuesRegister = {\n//   firstName: \"\",\n//   latstName: \"\",\n//   email: \"\",\n//   password: \"\",\n//   location: \"\",\n//   occupation: \"\",\n//   picture: \"\",\n// };\n// const initialValuesLogin = {\n//   email: \"\",\n//   password: \"\",\n// };\n// const Form = () => {\n//   const [pageType, setPageType] = useState(\"login\");\n//   const { palette } = useTheme();\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n//   const isNonMobile = useMediaQuery(\"(min-width:600px)\");\n//   const isLogin = pageType === \"login\";\n//   const isRegister = pageType === \"register\";\n// const register =async(values,onSubmitProps)=>{\n//   //this allows us to send form info with image\n//   const formData=new FormData();\n//   for(let value in values){\n//     formData.append(value,values[value])\n//   }\n//   formData.append('picturePath',values.picture.name);\n//   const savedUserResponse=await fetch(\n//     \"http://localhost:3001/auth/register\",\n//     {\n//       method:\"POST\",\n//       body:formData,\n//     }\n//   );\n//   const savedUser=await savedUserResponse.json();\n//   onSubmitProps.resetForm();\n//   if(savedUser){\n//     setPageType(\"login\");\n//   }\n// };\n// const login=async(values,onSubmitProps)=>{\n//   const loggedInResponse=await fetch(\n//     \"http://localhost:3001/auth/login\",\n//     {\n//       method:\"POST\",\n//       headers:{\"Content-Type\":\"application/json\"},\n//       body:JSON.stringify(values),\n//     }\n//   );\n//   const loggedIn =await loggedInResponse.json()\n//   onSubmitProps.resetForm();\n//   if(loggedIn){\n//     dispatch(\n//      setLogin({ user:loggedIn.user,\n//       token:loggedIn.token,})\n//     );\n//     navigate(\"/home\");\n//   }\n// }\n\n//   const handleFormSubmit = async (values, onSubmitProps) => {\n//     if(isLogin)await login(values,onSubmitProps);\n//     if(isRegister) await register(values,onSubmitProps);\n//   };\n//   return (\n//     <Formik\n//       onSubmit={handleFormSubmit}\n//       initialValues={isLogin ? initialValuesLogin : initialValuesRegister}\n//       validationSchema={isLogin ? loginSchema : registerSchema}\n//     >\n//       {({\n//         values,\n//         errors,\n//         touched,\n//         handleBlur,\n//         handleChange,\n//         handleSubmit,\n//         setFieldValue,\n//         resetForm,\n//       }) => (\n//         <form onSubmit={handleSubmit}>\n//           <Box\n//             display=\"grid\"\n//             gap=\"30px\"\n//             gridTemplateColumns=\"repeat(4,minmax(0,1fr))\"\n//             sx={{ \"&>div\": { gridColumn: isNonMobile ? undefined : \"span 4\" } }}\n//           >\n//             {isRegister && (\n//               <>\n//                 <TextField\n//                   label=\"First Name\"\n//                   onBlur={handleBlur}\n//                   onChange={handleChange}\n//                   value={values.firstName}\n//                   name=\"firstName\"\n//                   error={\n//                     Boolean(touched.firstName) && Boolean(errors.firstName)\n//                   }\n//                   helperText={touched.firstName && errors.firstName}\n//                   sx={{ gridColumn: \"span 2\" }}\n//                 />\n//                 <TextField\n//                   label=\"Last Name\"\n//                   onBlur={handleBlur}\n//                   onChange={handleChange}\n//                   value={values.lastName}\n//                   name=\"lastName\"\n//                   error={Boolean(touched.lastName) && Boolean(errors.lastName)}\n//                   helperText={touched.lastName && errors.lastName}\n//                   sx={{ gridColumn: \"span 2\" }}\n//                 />\n//                 <TextField\n//                   label=\"Location\"\n//                   onBlur={handleBlur}\n//                   onChange={handleChange}\n//                   value={values.location}\n//                   name=\"location\"\n//                   error={Boolean(touched.location) && Boolean(errors.location)}\n//                   helperText={touched.location && errors.location}\n//                   sx={{ gridColumn: \"span 4\" }}\n//                 />\n//                 <TextField\n//                   label=\"Occupation\"\n//                   onBlur={handleBlur}\n//                   onChange={handleChange}\n//                   value={values.occupation}\n//                   name=\"occupation\"\n//                   error={\n//                     Boolean(touched.occupation) && Boolean(errors.occupation)\n//                   }\n//                   helperText={touched.occupation && errors.occupation}\n//                   sx={{ gridColumn: \"span 4\" }}\n//                 />\n//                 <Box\n//                   gridColumn=\"span 4\"\n//                   border={`1px solid ${palette.neutral.medium}`}\n//                   borderRadius=\"5px\"\n//                   p=\"1rem\"\n//                 >\n//                   <Dropzone\n//                     acceptedFiles=\".jpg,.jpeg,.png\"\n//                     multiple={false}\n//                     onDrop={(acceptedFiles) =>\n//                       setFieldValue(\"picture\", acceptedFiles[0])\n//                     }\n//                   >\n//                     {({ getRootProps, getInputProps }) => (\n//                       <Box\n//                         {...getRootProps()}\n//                         border={`2px dashed ${palette.primary.main}`}\n//                         p=\"1rem\"\n//                         sx={{ \"&:hover\": { cursor: \"pointer\" } }}\n//                       >\n//                         <input {...getInputProps()} />\n//                         {!values.picture ? (\n//                           Box(<p>Add Picture Here</p>)\n//                         ) : (\n//                           <FlexBetween>\n//                             <Typography>{values.picture.name}</Typography>\n//                             <EditOutlinedIcon />\n//                           </FlexBetween>\n//                         )}\n//                       </Box>\n//                     )}\n//                   </Dropzone>\n//                 </Box>\n//               </>\n//             )}\n//             <TextField\n//                   label=\"Email\"\n//                   onBlur={handleBlur}\n//                   onChange={handleChange}\n//                   value={values.email}\n//                   name=\"email\"\n//                   error={\n//                     Boolean(touched.email) && Boolean(errors.email)\n//                   }\n//                   helperText={touched.email && errors.email}\n//                   sx={{ gridColumn: \"span 4\" }}\n//                 />\n//             <TextField\n//                   label=\"Password\"\n//                   type=\"password\"\n//                   onBlur={handleBlur}\n//                   onChange={handleChange}\n//                   value={values.password}\n//                   name=\"password\"\n//                   error={\n//                     Boolean(touched.password) && Boolean(errors.password)\n//                   }\n//                   helperText={touched.password && errors.password}\n//                   sx={{ gridColumn: \"span 4\" }}\n//                 />\n//           </Box>\n\n//           {/* button */}\n//           <Box>\n//             <Button \n//             fullWidth\n//             type=\"submit\"\n//             sx={{\n//               m:\"2rem 0\",\n//               p:\"1rem\",\n//               backgroundColor:palette.primary.main,\n//               color:palette.background.alt,\n//               \"&:hover\":{\n//                 color:palette.primary.main\n//               }\n\n//             }}\n//             >\n//   {isLogin ?\"LOGIN\" :\"REGISTER\"}\n//             </Button>\n//             <Typography\n//             onClick={()=>{\n//               setPageType(isLogin?\"register\":\"login\");\n//               resetForm();\n//             }}\n//             sx={{\n//               textDecoration:\"underline\",\n//               color:palette.primary.main,\n//               \"&:hover\":{\n//                 cursor:\"pointer\",\n//                 color:palette.primary.light,\n//               },\n//             }}\n//             >\n//  {isLogin?\"Don't have an account ? Sign Up here. \" :\"Already have an account? Login here.\"}\n//             </Typography>\n//           </Box>\n//         </form>\n//       )}\n//     </Formik>\n//   );\n// };\n// export default Form;","map":{"version":3,"names":[],"sources":["C:/sociopedia/server/client/src/scenes/loginPage/Form.jsx"],"sourcesContent":["// import { useState } from \"react\";\r\n// import {\r\n//   Box,\r\n//   Button,\r\n//   TextField,\r\n//   useMediaQuery,\r\n//   Typography,\r\n//   useTheme,\r\n// } from \"@mui/material\";\r\n// import EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\r\n// import { Formik } from \"formik\";\r\n// import * as yup from \"yup\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useDispatch } from \"react-redux\";\r\n// import { setLogin } from \"../../state\";\r\n// import Dropzone from \"react-dropzone\";\r\n// import FlexBetween from \"../../components/FlexBetween\";\r\n// const registerSchema = yup.object().shape({\r\n//   firstName: yup.string().required(\"required\"),\r\n//   latstName: yup.string().required(\"required\"),\r\n//   email: yup.string().email(\"invalid email\").required(\"required\"),\r\n//   password: yup.string().required(\"required\"),\r\n//   location: yup.string().required(\"required\"),\r\n//   occupation: yup.string().required(\"required\"),\r\n//   picture: yup.string().required(\"required\"),\r\n// });\r\n// const loginSchema = yup.object().shape({\r\n//   email: yup.string().email(\"invalid email\").required(\"required\"),\r\n//   password: yup.string().required(\"required\"),\r\n// });\r\n// const initialValuesRegister = {\r\n//   firstName: \"\",\r\n//   latstName: \"\",\r\n//   email: \"\",\r\n//   password: \"\",\r\n//   location: \"\",\r\n//   occupation: \"\",\r\n//   picture: \"\",\r\n// };\r\n// const initialValuesLogin = {\r\n//   email: \"\",\r\n//   password: \"\",\r\n// };\r\n// const Form = () => {\r\n//   const [pageType, setPageType] = useState(\"login\");\r\n//   const { palette } = useTheme();\r\n//   const dispatch = useDispatch();\r\n//   const navigate = useNavigate();\r\n//   const isNonMobile = useMediaQuery(\"(min-width:600px)\");\r\n//   const isLogin = pageType === \"login\";\r\n//   const isRegister = pageType === \"register\";\r\n// const register =async(values,onSubmitProps)=>{\r\n//   //this allows us to send form info with image\r\n//   const formData=new FormData();\r\n//   for(let value in values){\r\n//     formData.append(value,values[value])\r\n//   }\r\n//   formData.append('picturePath',values.picture.name);\r\n//   const savedUserResponse=await fetch(\r\n//     \"http://localhost:3001/auth/register\",\r\n//     {\r\n//       method:\"POST\",\r\n//       body:formData,\r\n//     }\r\n//   );\r\n//   const savedUser=await savedUserResponse.json();\r\n//   onSubmitProps.resetForm();\r\n//   if(savedUser){\r\n//     setPageType(\"login\");\r\n//   }\r\n// };\r\n// const login=async(values,onSubmitProps)=>{\r\n//   const loggedInResponse=await fetch(\r\n//     \"http://localhost:3001/auth/login\",\r\n//     {\r\n//       method:\"POST\",\r\n//       headers:{\"Content-Type\":\"application/json\"},\r\n//       body:JSON.stringify(values),\r\n//     }\r\n//   );\r\n//   const loggedIn =await loggedInResponse.json()\r\n//   onSubmitProps.resetForm();\r\n//   if(loggedIn){\r\n//     dispatch(\r\n//      setLogin({ user:loggedIn.user,\r\n//       token:loggedIn.token,})\r\n//     );\r\n//     navigate(\"/home\");\r\n//   }\r\n// }\r\n\r\n//   const handleFormSubmit = async (values, onSubmitProps) => {\r\n//     if(isLogin)await login(values,onSubmitProps);\r\n//     if(isRegister) await register(values,onSubmitProps);\r\n//   };\r\n//   return (\r\n//     <Formik\r\n//       onSubmit={handleFormSubmit}\r\n//       initialValues={isLogin ? initialValuesLogin : initialValuesRegister}\r\n//       validationSchema={isLogin ? loginSchema : registerSchema}\r\n//     >\r\n//       {({\r\n//         values,\r\n//         errors,\r\n//         touched,\r\n//         handleBlur,\r\n//         handleChange,\r\n//         handleSubmit,\r\n//         setFieldValue,\r\n//         resetForm,\r\n//       }) => (\r\n//         <form onSubmit={handleSubmit}>\r\n//           <Box\r\n//             display=\"grid\"\r\n//             gap=\"30px\"\r\n//             gridTemplateColumns=\"repeat(4,minmax(0,1fr))\"\r\n//             sx={{ \"&>div\": { gridColumn: isNonMobile ? undefined : \"span 4\" } }}\r\n//           >\r\n//             {isRegister && (\r\n//               <>\r\n//                 <TextField\r\n//                   label=\"First Name\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.firstName}\r\n//                   name=\"firstName\"\r\n//                   error={\r\n//                     Boolean(touched.firstName) && Boolean(errors.firstName)\r\n//                   }\r\n//                   helperText={touched.firstName && errors.firstName}\r\n//                   sx={{ gridColumn: \"span 2\" }}\r\n//                 />\r\n//                 <TextField\r\n//                   label=\"Last Name\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.lastName}\r\n//                   name=\"lastName\"\r\n//                   error={Boolean(touched.lastName) && Boolean(errors.lastName)}\r\n//                   helperText={touched.lastName && errors.lastName}\r\n//                   sx={{ gridColumn: \"span 2\" }}\r\n//                 />\r\n//                 <TextField\r\n//                   label=\"Location\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.location}\r\n//                   name=\"location\"\r\n//                   error={Boolean(touched.location) && Boolean(errors.location)}\r\n//                   helperText={touched.location && errors.location}\r\n//                   sx={{ gridColumn: \"span 4\" }}\r\n//                 />\r\n//                 <TextField\r\n//                   label=\"Occupation\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.occupation}\r\n//                   name=\"occupation\"\r\n//                   error={\r\n//                     Boolean(touched.occupation) && Boolean(errors.occupation)\r\n//                   }\r\n//                   helperText={touched.occupation && errors.occupation}\r\n//                   sx={{ gridColumn: \"span 4\" }}\r\n//                 />\r\n//                 <Box\r\n//                   gridColumn=\"span 4\"\r\n//                   border={`1px solid ${palette.neutral.medium}`}\r\n//                   borderRadius=\"5px\"\r\n//                   p=\"1rem\"\r\n//                 >\r\n//                   <Dropzone\r\n//                     acceptedFiles=\".jpg,.jpeg,.png\"\r\n//                     multiple={false}\r\n//                     onDrop={(acceptedFiles) =>\r\n//                       setFieldValue(\"picture\", acceptedFiles[0])\r\n//                     }\r\n//                   >\r\n//                     {({ getRootProps, getInputProps }) => (\r\n//                       <Box\r\n//                         {...getRootProps()}\r\n//                         border={`2px dashed ${palette.primary.main}`}\r\n//                         p=\"1rem\"\r\n//                         sx={{ \"&:hover\": { cursor: \"pointer\" } }}\r\n//                       >\r\n//                         <input {...getInputProps()} />\r\n//                         {!values.picture ? (\r\n//                           Box(<p>Add Picture Here</p>)\r\n//                         ) : (\r\n//                           <FlexBetween>\r\n//                             <Typography>{values.picture.name}</Typography>\r\n//                             <EditOutlinedIcon />\r\n//                           </FlexBetween>\r\n//                         )}\r\n//                       </Box>\r\n//                     )}\r\n//                   </Dropzone>\r\n//                 </Box>\r\n//               </>\r\n//             )}\r\n//             <TextField\r\n//                   label=\"Email\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.email}\r\n//                   name=\"email\"\r\n//                   error={\r\n//                     Boolean(touched.email) && Boolean(errors.email)\r\n//                   }\r\n//                   helperText={touched.email && errors.email}\r\n//                   sx={{ gridColumn: \"span 4\" }}\r\n//                 />\r\n//             <TextField\r\n//                   label=\"Password\"\r\n//                   type=\"password\"\r\n//                   onBlur={handleBlur}\r\n//                   onChange={handleChange}\r\n//                   value={values.password}\r\n//                   name=\"password\"\r\n//                   error={\r\n//                     Boolean(touched.password) && Boolean(errors.password)\r\n//                   }\r\n//                   helperText={touched.password && errors.password}\r\n//                   sx={{ gridColumn: \"span 4\" }}\r\n//                 />\r\n//           </Box>\r\n\r\n//           {/* button */}\r\n//           <Box>\r\n//             <Button \r\n//             fullWidth\r\n//             type=\"submit\"\r\n//             sx={{\r\n//               m:\"2rem 0\",\r\n//               p:\"1rem\",\r\n//               backgroundColor:palette.primary.main,\r\n//               color:palette.background.alt,\r\n//               \"&:hover\":{\r\n//                 color:palette.primary.main\r\n//               }\r\n\r\n//             }}\r\n//             >\r\n//   {isLogin ?\"LOGIN\" :\"REGISTER\"}\r\n//             </Button>\r\n//             <Typography\r\n//             onClick={()=>{\r\n//               setPageType(isLogin?\"register\":\"login\");\r\n//               resetForm();\r\n//             }}\r\n//             sx={{\r\n//               textDecoration:\"underline\",\r\n//               color:palette.primary.main,\r\n//               \"&:hover\":{\r\n//                 cursor:\"pointer\",\r\n//                 color:palette.primary.light,\r\n//               },\r\n//             }}\r\n//             >\r\n//  {isLogin?\"Don't have an account ? Sign Up here. \" :\"Already have an account? Login here.\"}\r\n//             </Typography>\r\n//           </Box>\r\n//         </form>\r\n//       )}\r\n//     </Formik>\r\n//   );\r\n// };\r\n// export default Form;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}